// Generated by purs bundle 0.14.9
var PS = {};
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Foreign.EasyFFI"] = $PS["Data.Foreign.EasyFFI"] || {};
  var exports = $PS["Data.Foreign.EasyFFI"];
  var $foreign = $PS["Data.Foreign.EasyFFI"];
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Graphics.Three.Util"] = $PS["Graphics.Three.Util"] || {};
  var exports = $PS["Graphics.Three.Util"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var fpi = Data_Foreign_EasyFFI.unsafeForeignProcedure;
  var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
  exports["ffi"] = ffi;
  exports["fpi"] = fpi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Graphics.Three.Camera"] = $PS["Graphics.Three.Camera"] || {};
  var exports = $PS["Graphics.Three.Camera"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var createPerspective = Graphics_Three_Util.ffi([ "fov", "aspect", "near", "far", "" ])("new THREE.PerspectiveCamera(fov, aspect, near, far)");
  exports["createPerspective"] = createPerspective;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Graphics.Three.Object3D"] = $PS["Graphics.Three.Object3D"] || {};
  var exports = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var setPosition = function () {
      return Graphics_Three_Util.fpi([ "object", "x", "y", "z", "" ])("object.position.set(x, y, z)");
  };
  exports["setPosition"] = setPosition;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Graphics.Three.Renderer"] = $PS["Graphics.Three.Renderer"] || {};
  var exports = $PS["Graphics.Three.Renderer"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var setSize = Graphics_Three_Util.ffi([ "renderer", "width", "height", "" ])("renderer.setSize(width, height)");
  var render = function () {
      return Graphics_Three_Util.fpi([ "renderer", "scene", "camera", "" ])("renderer.render(scene, camera)");
  };                                                                                  
  var createWebGL = Graphics_Three_Util.ffi([ "params", "" ])("new THREE.WebGLRenderer(params)");
  var appendToDomByID = Graphics_Three_Util.fpi([ "renderer", "idStr", "" ])("document.getElementById(idStr).appendChild(renderer.domElement)");
  exports["createWebGL"] = createWebGL;
  exports["setSize"] = setSize;
  exports["render"] = render;
  exports["appendToDomByID"] = appendToDomByID;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Graphics.Three.Scene"] = $PS["Graphics.Three.Scene"] || {};
  var exports = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var create = Graphics_Three_Util.ffi([ "" ])("new THREE.Scene()");
  exports["create"] = create;
})(PS);
(function(exports) {
  "use strict";                                                                     

  // var mtlLoader = new MTLLoader().load("url", function (materials){});

  exports.loadOBJ = url => cb => () => new THREE.OBJLoader().load(url,x => cb(x)());            

  // var objLoader = new OBJLoader().load("url", function (object){});

  //////////

  exports.addAnythingToScene = scene => anything => () => scene.add(anything);

  // LIGHTS

  exports.hemisphereLight = skyColor => groundColor => intensity => () => new THREE.HemisphereLight(skyColor,groundColor,intensity);

  exports.requestAnimationFrame = callback => () => window.requestAnimationFrame(callback)
  object.children[c].material = materials.materials.None;
})(PS["ThreeJS"] = PS["ThreeJS"] || {});
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["ThreeJS"] = $PS["ThreeJS"] || {};
  var exports = $PS["ThreeJS"];
  var $foreign = $PS["ThreeJS"];
  exports["loadOBJ"] = $foreign.loadOBJ;
  exports["addAnythingToScene"] = $foreign.addAnythingToScene;
  exports["hemisphereLight"] = $foreign.hemisphereLight;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.9
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Data_Unit = $PS["Data.Unit"];
  var Graphics_Three_Camera = $PS["Graphics.Three.Camera"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Renderer = $PS["Graphics.Three.Renderer"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var ThreeJS = $PS["ThreeJS"];                
  var animate = function (re) {
      return function __do() {
          Graphics_Three_Renderer.render()(re.renderer)(re.scene)(re.camera)();
          return ThreeJS.requestAnimationFrame(animate(re))();
      };
  };
  var addingOBJtoScene = function (sc) {
      return function (urlObj) {
          return ThreeJS.loadOBJ(urlObj)(function (object) {
              return function __do() {
                  ThreeJS.addAnythingToScene(sc)(object)();
                  return Data_Unit.unit;
              };
          });
      };
  };
  var main = function __do() {
      var scene = Graphics_Three_Scene.create();
      var camera = Graphics_Three_Camera.createPerspective(75.0)(16.0 / 9.0)(0.1)(100.0)();
      Graphics_Three_Object3D.setPosition()(camera)(0.0)(0.0)(6.0)();
      var renderer = Graphics_Three_Renderer.createWebGL({
          antialias: true
      })();
      Graphics_Three_Renderer.setSize(renderer)(1250.0)(720.0)();
      Graphics_Three_Renderer.appendToDomByID(renderer)("canvas")();
      addingOBJtoScene(scene)("3dObjects/cubo.obj")();
      var lights = ThreeJS.hemisphereLight(16777147)(526368)(1)();
      ThreeJS.addAnythingToScene(scene)(lights)();
      var re = {
          scene: scene,
          camera: camera,
          renderer: renderer
      };
      ThreeJS.requestAnimationFrame(animate(re))();
      return re;
  };
  exports["main"] = main;
  exports["addingOBJtoScene"] = addingOBJtoScene;
  exports["animate"] = animate;
})(PS);
PS["Main"].main();