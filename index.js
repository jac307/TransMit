// Generated by purs bundle 0.14.7
var PS = {};
(function(exports) {
  /* global exports */
  "use strict";

  exports.unsafeForeignProcedure = function(args) {
      return function (stmt) {
          return Function(wrap(args.slice()))();
          function wrap() {
              return !args.length ? stmt : 'return function (' + args.shift() + ') { ' + wrap() + ' };';
          }
      };
  };
})(PS["Data.Foreign.EasyFFI"] = PS["Data.Foreign.EasyFFI"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Data.Foreign.EasyFFI"] = $PS["Data.Foreign.EasyFFI"] || {};
  var exports = $PS["Data.Foreign.EasyFFI"];
  var $foreign = $PS["Data.Foreign.EasyFFI"];
  var unsafeForeignFunction = function (args) {
      return function (expr) {
          return $foreign.unsafeForeignProcedure(args)("return " + (expr + ";"));
      };
  };
  exports["unsafeForeignFunction"] = unsafeForeignFunction;
  exports["unsafeForeignProcedure"] = $foreign.unsafeForeignProcedure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Util"] = $PS["Graphics.Three.Util"] || {};
  var exports = $PS["Graphics.Three.Util"];
  var Data_Foreign_EasyFFI = $PS["Data.Foreign.EasyFFI"];                
  var fpi = Data_Foreign_EasyFFI.unsafeForeignProcedure;
  var ffi = Data_Foreign_EasyFFI.unsafeForeignFunction;
  exports["ffi"] = ffi;
  exports["fpi"] = fpi;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Camera"] = $PS["Graphics.Three.Camera"] || {};
  var exports = $PS["Graphics.Three.Camera"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var createPerspective = Graphics_Three_Util.ffi([ "fov", "aspect", "near", "far", "" ])("new THREE.PerspectiveCamera(fov, aspect, near, far)");
  exports["createPerspective"] = createPerspective;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Geometry"] = $PS["Graphics.Three.Geometry"] || {};
  var exports = $PS["Graphics.Three.Geometry"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                                                                                                        
  var createBox = Graphics_Three_Util.ffi([ "width", "height", "depth", "" ])("new THREE.BoxGeometry(width, height, depth)");
  exports["createBox"] = createBox;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Material"] = $PS["Graphics.Three.Material"] || {};
  var exports = $PS["Graphics.Three.Material"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                                          
  var createMeshBasic = Graphics_Three_Util.ffi([ "param", "" ])("new THREE.MeshBasicMaterial(param)");
  exports["createMeshBasic"] = createMeshBasic;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Object3D"] = $PS["Graphics.Three.Object3D"] || {};
  var exports = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];
  var setRotationEuler = function () {
      return Graphics_Three_Util.fpi([ "object", "x", "y", "z", "" ])("object.rotation.set(x, y, z)");
  };
  var setPosition = function () {
      return Graphics_Three_Util.fpi([ "object", "x", "y", "z", "" ])("object.position.set(x, y, z)");
  };
  var createMesh = function () {
      return Graphics_Three_Util.ffi([ "geometry", "material", "" ])("new THREE.Mesh(geometry, material)");
  };
  exports["createMesh"] = createMesh;
  exports["setPosition"] = setPosition;
  exports["setRotationEuler"] = setRotationEuler;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Renderer"] = $PS["Graphics.Three.Renderer"] || {};
  var exports = $PS["Graphics.Three.Renderer"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var setSize = Graphics_Three_Util.ffi([ "renderer", "width", "height", "" ])("renderer.setSize(width, height)");
  var render = function () {
      return Graphics_Three_Util.fpi([ "renderer", "scene", "camera", "" ])("renderer.render(scene, camera)");
  };                                                                                  
  var createWebGL = Graphics_Three_Util.ffi([ "params", "" ])("new THREE.WebGLRenderer(params)");
  var appendToDomByID = Graphics_Three_Util.fpi([ "renderer", "idStr", "" ])("document.getElementById(idStr).appendChild(renderer.domElement)");
  exports["createWebGL"] = createWebGL;
  exports["setSize"] = setSize;
  exports["render"] = render;
  exports["appendToDomByID"] = appendToDomByID;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Graphics.Three.Scene"] = $PS["Graphics.Three.Scene"] || {};
  var exports = $PS["Graphics.Three.Scene"];
  var Graphics_Three_Util = $PS["Graphics.Three.Util"];                
  var create = Graphics_Three_Util.ffi([ "" ])("new THREE.Scene()");
  var addObject = function () {
      return Graphics_Three_Util.fpi([ "scene", "a", "" ])("scene.add(a)");
  };
  exports["create"] = create;
  exports["addObject"] = addObject;
})(PS);
(function(exports) {
  "use strict";                                                                        

  exports.print = thing => () => console.log(thing);

  exports.requestAnimationFrame = callback => () => window.requestAnimationFrame(callback)

  // TEXTURE

  // loading

  exports.textureLoader = url => () => new THREE.TextureLoader().load(url);

  exports.createElement = name => () => document.createElement(name);

  exports.srcOfElement = elem => url => () => elem.src = url;              

  exports.videoTexture = videoElem => () => new THREE.VideoTexture(videoElem);

  // video settings

  exports.preload = videoElem => () => videoElem.preload = "auto";

  exports.play = videoElem => () => videoElem.play();

  // exports.play = videoElem => () => document.onkeydown = function (e) {
  //   if (e.keyCode === 80) {
  //     videoElem.play()
  //   }}

  exports.loop = videoElem => bool => () => videoElem.loop = bool;

  exports.muted = videoElem => bool => () => videoElem.muted = bool;     

  exports.autoplay = videoElem => bool => () => videoElem.autoplay = bool;
})(PS["ThreeJS"] = PS["ThreeJS"] || {});
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["ThreeJS"] = $PS["ThreeJS"] || {};
  var exports = $PS["ThreeJS"];
  var $foreign = $PS["ThreeJS"];
  exports["print"] = $foreign.print;
  exports["requestAnimationFrame"] = $foreign.requestAnimationFrame;
  exports["textureLoader"] = $foreign.textureLoader;
  exports["createElement"] = $foreign.createElement;
  exports["srcOfElement"] = $foreign.srcOfElement;
  exports["videoTexture"] = $foreign.videoTexture;
  exports["preload"] = $foreign.preload;
  exports["play"] = $foreign.play;
  exports["loop"] = $foreign.loop;
  exports["muted"] = $foreign.muted;
  exports["autoplay"] = $foreign.autoplay;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.7
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Graphics_Three_Camera = $PS["Graphics.Three.Camera"];
  var Graphics_Three_Geometry = $PS["Graphics.Three.Geometry"];
  var Graphics_Three_Material = $PS["Graphics.Three.Material"];
  var Graphics_Three_Object3D = $PS["Graphics.Three.Object3D"];
  var Graphics_Three_Renderer = $PS["Graphics.Three.Renderer"];
  var Graphics_Three_Scene = $PS["Graphics.Three.Scene"];
  var ThreeJS = $PS["ThreeJS"];                
  var animate = function (re) {
      return function __do() {
          Graphics_Three_Renderer.render()(re.renderer)(re.scene)(re.camera)();
          return ThreeJS.requestAnimationFrame(animate(re))();
      };
  };
  var main = function __do() {
      var scene = Graphics_Three_Scene.create();
      var camera = Graphics_Three_Camera.createPerspective(75.0)(16.0 / 9.0)(0.1)(100.0)();
      var renderer = Graphics_Three_Renderer.createWebGL({
          antialias: true
      })();
      Graphics_Three_Renderer.setSize(renderer)(1250.0)(720.0)();
      Graphics_Three_Renderer.appendToDomByID(renderer)("canvas")();
      Graphics_Three_Object3D.setPosition()(camera)(0.0)(0.0)(5.0)();
      var video = ThreeJS.createElement("video")();
      ThreeJS.srcOfElement(video)("src/textures/leo.mov")();
      ThreeJS.preload(video)();
      ThreeJS.loop(video)(true)();
      ThreeJS.muted(video)(true)();
      ThreeJS.autoplay(video)(true)();
      ThreeJS.play(video)();
      var videoTexture = ThreeJS.videoTexture(video)();
      var imgTexture = ThreeJS.textureLoader("src/textures/cellos.jpg")();
      ThreeJS.print(imgTexture)();
      var material = Graphics_Three_Material.createMeshBasic({
          map: videoTexture
      })();
      var geometry = Graphics_Three_Geometry.createBox(2.0)(2.0)(2.0)();
      var mesh = Graphics_Three_Object3D.createMesh()(geometry)(material)();
      Graphics_Three_Scene.addObject()(scene)(mesh)();
      Graphics_Three_Object3D.setRotationEuler()(mesh)(1.5)(0.5)(0.5)();
      var re = {
          scene: scene,
          camera: camera,
          renderer: renderer
      };
      ThreeJS.requestAnimationFrame(animate(re))();
      return re;
  };
  exports["main"] = main;
  exports["animate"] = animate;
})(PS);
PS["Main"].main();